{
  "hash": "865987ec874f40e397840264fd9b30b7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"ModernBERT vs LLMs for Detecting Adverse Drug Reactions\"\nauthor: \"Paul Simmering\"\ndate: \"2025-01-12\"\nbibliography: bibliography.bib  \ncategories: [\"Machine Learning\"]\nimage: \"image.webp\"\ntoc: true\nfilters:\n  - d2\n---\n\n\nHuggingFace recently released ModernBERT [@warner2024smarterbetterfasterlonger], an updated version of the BERT language model [@devlin2018bert] which backports many improvements from LLM research back to the classic 2018 model. In contrast to LLMs, ModernBERT is an encoder-only model that is fitted with a task-specific head outputting probabilities for structured NLP tasks, rather than tokens.\n\nWhile LLMs with their decoder-only architecture were originally designed for text generation, they have also been used for structured NLP tasks like text classification. They are imbued with a large amount of general knowledge and excel at zero-shot and few-shot learning. Through the proliferation of the LLM ecosystem they are also widely available via APIs and familiar to many developers.\n\nHere, I will compare ModernBERT to Meta's Llama 3.2-3B by @grattafiori2024llama3herdmodels on a text classification task using the dimensions accuracy, speed, cost and ease of use. Text classification is a simple task, yet very common and important in NLP pipelines. It may also be coupled with text generation in a chat bot, such as for intent classification or as a guardrail to prevent undesirable responses.\n\n## Task: Adverse event classification\n\nDuring my work in market research for pharmaceutical companies, I frequently have to monitor data for **adverse events**. An adverse event is any undesirable medical event that occurs during or after treatment with a drug. Examples include side effects, lack of efficacy, and overdoses. It is of utmost importance to identify adverse events and report them to the producing pharmaceutical company. This task is labor intensive, so naturally I'm interested in automating it. I'll use the ADE-Benchmark Corpus @gurulingappa_development_2012 as an example dataset. It contains 23,500 English medical text sentences describing effects of drugs. Each sentence is classified as 1: adverse drug reaction or 0: no adverse drug reaction. This represents a subtask of the broader task of adverse event monitoring.\n\n| Resource | Link |\n|----------|------|\n| üíª Python code | [GitHub](https://github.com/psimm/website/blob/master/blog/modernbert-vs-llm/) |\n| üìä Experiment results | [Weights & Biases project](https://wandb.ai/psimm/modernbert-vs-llm?nw=0uja1rkfaqe) |\n| üìù Dataset: ADE-Benchmark Corpus | [Hugging Face Hub](https://huggingface.co/datasets/ade-benchmark-corpus/ade_corpus_v2) |\n\nAll training and inference is done on a single A10G GPU hosted on [Modal](https://modal.com). It costs $1.10/h. A Modal account is required to run the code. The free tier ($30 of free credits per month) is sufficient for this experiment.\n\n## Experiment setup\n\nThe diagram below illustrates three experiment setups: fine-tuning ModernBERT, few-shot learning with Llama 3.2-3B, and fine-tuning Llama 3.2-3B.\n\n![](experiment.svg)\n\n### Dataset preparation\n\nThe dataset on HuggingFace consists of 23,516 sentences. After removing duplicate sentences, 20,896 unique examples are left. The distribution of classes is uneven, with more examples of texts without an adverse events. To balance the classes, I'm subsampling the negative examples down to 4,271 cases. Balanced classes prevent the models from overfitting to the majority class and let us compare the models using a simple accuracy metric.\n\nThen, the dataset is split into 60% training, 20% validation and 20% test sets. The validation set is used to tune hyperparameters and implement early stopping. Splits are stratified by class to ensure a 50:50 split between positive and negative examples in each split. The final example count is:\n\n| Split | Class | Examples |\n|-------|-------|----------:|\n| Training | Adverse Event | 2,562 |\n| Training | No Adverse Event | 2,562 |\n| Validation | Adverse Event | 855 |\n| Validation | No Adverse Event | 855 |\n| Test | Adverse Event | 854 |\n| Test | No Adverse Event | 854 |\n\n### Model selection\n\nI'm comparing ModernBERT-base and ModernBERT-large as the structured language models with Llama 3.2-3B-instruct as the LLM.\n\n| Model | Architecture | Parameters | Size at FP32 |\n|-------|--------------|------------|----------------|\n| [ModernBERT-base](https://huggingface.co/answerdotai/ModernBERT-base) | Encoder-only: outputs a probability distribution over classes | 149M | ~0.6GB |\n| [ModernBERT-large](https://huggingface.co/answerdotai/ModernBERT-large) | Encoder-only: outputs a probability distribution over classes | 395M | ~1.6GB |\n| [Llama 3.2-3B](https://huggingface.co/meta-llama/Llama-3.2-3B) | Decoder-only: outputs text | 3B | ~12GB |\n\nFor inference, about 1.5 to 2x the model size is required to store the attention cache, calculate layer activations and other intermediate results. The A10G GPU used for this experiment has 24GB memory, so both models fit. The memory footprint can be reduced by half by using FP16 or INT8 precision, which is common for inference.\n\n### Setup 1: Fine-tuning ModernBERT\n\nI'm using the transformers library to fine-tune ModernBERT base and large on the training set. @schmid_fine_tune_2024 from Hugging Face wrote a helpful guide which I adapted for use on Modal. The models are optimized on binary cross-entropy loss for 5 epochs. Training took about 2 minutes for ModernBERT-base and 3.5 minutes for ModernBERT-large.\n\n### Setup 2: Few-shot learning with Llama 3.2-3B and DSPy\n\nI'm using DSPy [@khattab2023dspycompilingdeclarativelanguage] to automatically select an optimal set of examples for few-shot learning. That's a more objective approach than manual prompting and usually results in equally good or better accuracy. In my first trials, DSPy didn't manage to write a suitable system prompt as it didn't understand the adverse drug reaction task from examples alone. So I added the prompt: \"Determine if the following sentence is about adverse drug reactions: \" to the examples. This increased the accuracy by about 15 percentage points.\n\nDSPy settings:\n\n- 20 few-shot examples plus 5 bootstrapped (AI generated) examples\n- Optimized for accuracy using MIPROv2 (minibatch size 50, minibatch full eval steps 10, num trials 3)\n- 25 threads for calls to the LLM, which is hosted using FastAPI and vLLM on Modal\n\nThe optimized predictor is available as a JSON file in the [Weights & Biases project](https://wandb.ai/psimm/modernbert-vs-llm?nw=0uja1rkfaqe).\n\n### Setup 3: Fine-tuning Llama 3.2-3B\n\nI'm using the torchtune library and a fine-tuning configuration to train a LoRA adapter on the training set. It targets the attention and feed-forward layers of the model. The adapter is a smaller set of weights that are added to the model at inference time. LoRA training incurs less training cost than full fine-tuning of all weights, but may result in worse accuracy. The LoRA settings used for training are available in the W&B project and the training config file for torchtune. Training took about 8 minutes on the A10G.\n\n## Results\n\n### Accuracy and speed\n\n\n\n::: {#b37cb871 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div id=\"fiymboznsk\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#fiymboznsk table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#fiymboznsk thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#fiymboznsk p { margin: 0; padding: 0; }\n #fiymboznsk .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #004D80; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #004D80; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #fiymboznsk .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #fiymboznsk .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #fiymboznsk .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #fiymboznsk .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #fiymboznsk .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #0076BA; }\n #fiymboznsk .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #0076BA; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #0076BA; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #fiymboznsk .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #fiymboznsk .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #fiymboznsk .gt_column_spanner_outer:first-child { padding-left: 0; }\n #fiymboznsk .gt_column_spanner_outer:last-child { padding-right: 0; }\n #fiymboznsk .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #0076BA; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #fiymboznsk .gt_spanner_row { border-bottom-style: hidden; }\n #fiymboznsk .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #0076BA; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #0076BA; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #fiymboznsk .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #0076BA; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #0076BA; vertical-align: middle; }\n #fiymboznsk .gt_from_md> :first-child { margin-top: 0; }\n #fiymboznsk .gt_from_md> :last-child { margin-bottom: 0; }\n #fiymboznsk .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: none; border-top-width: 1px; border-top-color: #89D3FE; border-left-style: none; border-left-width: 1px; border-left-color: #89D3FE; border-right-style: none; border-right-width: 1px; border-right-color: #89D3FE; vertical-align: middle; overflow-x: hidden; }\n #fiymboznsk .gt_stub { color: #FFFFFF; background-color: #0076BA; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #0076BA; padding-left: 5px; padding-right: 5px; }\n #fiymboznsk .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #fiymboznsk .gt_row_group_first td { border-top-width: 2px; }\n #fiymboznsk .gt_row_group_first th { border-top-width: 2px; }\n #fiymboznsk .gt_striped { background-color: #F4F4F4; }\n #fiymboznsk .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #0076BA; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #0076BA; }\n #fiymboznsk .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #fiymboznsk .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #fiymboznsk .gt_left { text-align: left; }\n #fiymboznsk .gt_center { text-align: center; }\n #fiymboznsk .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #fiymboznsk .gt_font_normal { font-weight: normal; }\n #fiymboznsk .gt_font_bold { font-weight: bold; }\n #fiymboznsk .gt_font_italic { font-style: italic; }\n #fiymboznsk .gt_super { font-size: 65%; }\n #fiymboznsk .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #fiymboznsk .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"6\" class=\"gt_heading gt_title gt_font_normal\">Model Performance Comparison</td>\n  </tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Setup\">Setup</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"F1 Score (%)\">F1 Score (%)</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Recall (%)\">Recall (%)</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Precision (%)\">Precision (%)</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Examples/sec\">Examples/sec</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Configuration\">Configuration</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">1a-modernbert-base</td>\n    <td class=\"gt_row gt_right\">86.0</td>\n    <td class=\"gt_row gt_right\">90.3</td>\n    <td class=\"gt_row gt_right\">82.2</td>\n    <td class=\"gt_row gt_right\">118</td>\n    <td class=\"gt_row gt_left\">transformers pipeline, batch size 128</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left gt_striped\">1b-modernbert-large</td>\n    <td class=\"gt_row gt_right gt_striped\">89.2</td>\n    <td class=\"gt_row gt_right gt_striped\">91.8</td>\n    <td class=\"gt_row gt_right gt_striped\">86.8</td>\n    <td class=\"gt_row gt_right gt_striped\">87</td>\n    <td class=\"gt_row gt_left gt_striped\">transformers pipeline, batch size 128</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">2-DSPy-25-threads-Llama-3.2-3B-Instruct</td>\n    <td class=\"gt_row gt_right\">80.7</td>\n    <td class=\"gt_row gt_right\">87.9</td>\n    <td class=\"gt_row gt_right\">74.6</td>\n    <td class=\"gt_row gt_right\">4</td>\n    <td class=\"gt_row gt_left\">DSPy, 25 threads, vLLM OpenAI server with default settings</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left gt_striped\">3-Llama-3.2-3B-Instruct-LoRA</td>\n    <td class=\"gt_row gt_right gt_striped\">93.1</td>\n    <td class=\"gt_row gt_right gt_striped\">92.0</td>\n    <td class=\"gt_row gt_right gt_striped\">94.2</td>\n    <td class=\"gt_row gt_right gt_striped\">152</td>\n    <td class=\"gt_row gt_left gt_striped\">vLLM, default settings</td>\n  </tr>\n</tbody>\n  <tfoot class=\"gt_sourcenotes\">\n  \n  <tr>\n    <td class=\"gt_sourcenote\" colspan=\"6\">*Speed of setup 2 is limited by DSPy. Speeds similar to setup 3 can be achieved with efficient batching.</td>\n  </tr>\n\n</tfoot>\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\nModernBERT-base and ModernBERT-large performed similarly. Large has a 3.2 percentage point advantage in F1 score but at the cost of 27% slower inference. The few-shot approach doesn't need nearly as much training data, but also results in a less accurate model. It also ran slowly, and this didn't change when I increased the number of threads used by DSPy to communicate with the vLLM server. I suspect it's due to inefficient batch inference code in DSPy. Higher speeds could be achieved with a more efficient batching approach.\n\nThe clear winner of the experiment is the LoRA fine-tuned Llama 3.2-3B. It's the most accurate and the fastest. This is down to vLLM being extremely well optimized and using CUDA graph capturing ahead of inference time. If that preparation time of 30 seconds is added, it's examples per second go down to 42.\n\n### Cost and effort\n\nAll setups can be trained for under one dollar and in less than 15 minutes. The differences are negligible. What matters more is the time spent setting up training and inference. The transformers library and the tutorial made it very easy to fine-tune ModernBERT and run inference. A major plus is that due to its low size, it can run on CPU at good speed too. DSPy was more involved because it required setting up a vLLM server too. This step is easier when using a managed service like Fireworks AI. Fine-tuning Llama 3.2-3B was the most involved step, as it required formatting the data in a chat format and going through the detailed configuration of the torchtune library and vLLM. Still, it only took a few hours. This step is also easier with a managed service.\n\n## Discussion\n\n### Implications for NLP\n\n#### Fine-tuning vs prompt-based approaches\n\nFine-tuning continues to outperform purely prompt-based approaches, even when those are optimized using automated prompt engineering. If you have enough examples to fine-tune on, it's a good idea to do so. Still the recall achieved by the few-shot approach is impressive and can serve as a strong baseline and starting point in the development of text classification systems.\n\n#### Model size and architecture\n\nIn fine-tuning, the size of the model is a key factor. Here, ModernBERT did well and is a strong choice for text classification and other structured NLP tasks. ModernBERT-large offers a modest accuracy improvement in exchange for slower inference. However, Llama 3.2-3B with a fine-tuned LoRA adapter outperformed it in accuracy in this experiment. Its architecture as a decoder-only model is, in theory, less suited for structured tasks. Did it win by sheer size? It would be interesting to see what a ModernBERT-3B or -8B model would achieve. In a related task of sentiment analysis [@zhou_comprehensive_2024], the scaling limit was found to be at 8 billion parameters with a decoder-only model.\n\n#### Processing speed\n\nProcessing speed is highly sensitive to the hardware and inference setup. Thanks to vLLM's CUDA graph capturing and other optimizations, the Llama 3.2-3B LoRA adapter ran faster than the ModernBERT models in this experiment, despite its size. Perhaps the efficiency optimizations made in LLM research could be backported to encoder-only models too, just like ModernBERT backported training techniques from LLMs back to the classic 2018 model. Note that this speed comparison was not comprehensive and is dependent on the GPU, the inference library and the exact settings used, such as batch size.\n\n### Implications for adverse event monitoring\n\n#### Greater sensitivity with larger models\n\nThe primary metric for adverse event monitoring is sensitivity, as missing a true adverse event is much more costly than flagging a false positive. The results show a sensitivity of 92% in detection of adverse drug reactions in medical texts using a Llama 3.2-3B. It outperforms previous approaches that used a convolutional neural network [@huynh_adverse_2016, 89%] and a BERT sentence embeddings model [@haq_mining_2022, 85%]. This advance is a step towards an automated adverse event monitoring system. With larger models and more training data, the sensitivity can be improved further.\n\n#### Towards a production system\n\nA production system for automated adverse event monitoring would need a more comprehensive approach:\n\n- Adjustable threshold for flagging adverse events\n- Flagging of complex cases for human review\n- Tests and training data for other languages, other text types such as case reports, social media and interview transcripts\n- Tests and training data for other adverse types, such as overdose, lack of efficacy, and use during pregnancy or breastfeeding\n\nNone of these require new breakthroughs in AI - they are doable with current technology.\n\n---\n\nPreview image based on <a href=\"https://unsplash.com/@magicpattern?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">MagicPattern</a> on <a href=\"https://unsplash.com/photos/blue-and-white-checkered-pattern-am-yg8wLLIo?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
{
  "hash": "74717bc2741487cfe3d5a755d6f38dc3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Text-based diagrams and LLMs are a match made in heaven\"\nauthor: \"Paul Simmering\"\ndate: \"2024-12-26\"\ncategories: [\"Productivity\"]\nimage: \"image.webp\"\nformat:\n    html:\n        mermaid: \n          theme: neutral\n---\n\n\n## What is a text-based diagram?\n\nSkip to the next section if you're already familiar with text-based diagrams.\n\nIt's a diagram that is generated from markdown-like text. Rather than clicking and dragging, you write the text and the diagram is generated. Elements are automatically positioned and connected using a layout engine. This lets you focus on the content, rather than the look, at the expense of some flexibility.\n\nText-based diagrams are not new, with the [DOT language](https://en.wikipedia.org/wiki/DOT_language) being used for [GraphViz](https://graphviz.org/) since 1991.\n\nHere's a quick example of a text-based diagram in D2, a popular tool.\n\n```d2\nAlice -> Bob: Hi Bob\n```\n\nThis generates the following diagram:\n\n```{d2}\nAlice -> Bob: Hi Bob\n```\n\nThis generates the following diagram:\n\n\n```{mermaid}\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Bob->>Alice: Hi Alice\n    Alice->>Bob: Hi Bob\n```\n\n\nI think they were great all along, but they've become much more useful with the rise of LLM assistants.\n\n## LLMs make diagrams practical\n\n- Assistants are great at turning a quick prompt into a text-based diagram\n- These diagrams can be used for planning, documentation and presentations\n- In addition, they can be used as input for LLM code generation. Just reference the diagram's code and tell it which language or framework to use.\n- They can be version controlled and shared along with the code\n- A typical problem is that diagrams are becoming outdated when the code changes. This is due to developers being lazy, forgetful or too busy to update the diagram. If that update can be done automatically by an LLM, the diagram can be kept up to date. Can also add a checkbox to the PR merge process that the diagram was updated, if necessary.\n- Overall, as LLMs do more of the actual coding, being great at architecture and design is becoming more important. Diagrams are a powerful tool for this.\n\nHow can an assistant help with diagrams?\n\n- Generate from a prompt\n- Update using a prompt, which could be text or a code diff\n- Validate the diagram against the code\n- Translate between different diagram formats\n- Suggest improvements based on a diagram\n\n## Text-based diagram systems\n\nLet's take a look at some of the most popular text-based diagram systems.\n\n| Name | Description | Best for |\n|--------|-----------|----------|\n| [Mermaid](https://mermaid.js.org/) | JavaScript-based diagramming tool that renders in browsers. Integrated with many Markdown tools and platforms like GitHub. | Flow charts, sequence diagrams, class diagrams. Great for documentation in repos. |\n| [PlantUML](https://plantuml.com/) | Java-based diagram generator with extensive notation support. Requires local installation or server. | Complex UML diagrams, component diagrams. Best for detailed software architecture. |\n| [Draw.io](https://www.drawio.com/) | Web-based diagram editor that can export to text format. Has both GUI and text modes. | General purpose diagrams, wireframes. Good for teams that mix technical/non-technical users. |\n| [D2](https://d2lang.com/) | Modern declarative diagram language focused on developer experience. Built-in layout engine. | Modern architecture diagrams, infrastructure diagrams. Ideal for cloud/distributed systems. |\n| [GraphViz](https://graphviz.org/) | Veteran open-source graph visualization software. Uses DOT language for defining graphs. | Network diagrams, dependency graphs. Great for automated diagram generation. |\n\nAll of them are free to use, have permissive licenses and an extension for VSCode. The website [text-to-diagram.com](https://text-to-diagram.com/) has a fantastic comparison of D2, Mermaid, PlantUML and GraphViz.\n\nMy favorite is **D2**, as it creates the most aesthetic and readable diagrams and is the most fully-featured. Mermaid wins for compatibility.\n\nIf you're using Quarto, like I do for this blog, Mermaid and GraphViz support is [built-in](https://quarto.org/docs/authoring/diagrams.html) and D2 support can be added with a [plugin](https://github.com/data-intuitive/quarto-d2).\n\n## Making better diagrams\n\nFinally, let's go over some principles that help increase the clarity and usefulness of diagrams.\n\n### Content and layout\n\n1. Use the appropriate diagram type. Flowcharts are the most common, but there are many other types such as [sequence diagrams](https://mermaid.js.org/syntax/sequenceDiagram.html), [class diagrams](https://mermaid.js.org/syntax/classDiagram.html), and [user journey diagrams](https://mermaid.js.org/syntax/userJourney.html).\n2. Make the reading direction clear (typically left-to-right or top-to-bottom).\n3. Only model the key components, rather than every single detail. Keep the diagram at a single level of abstraction. The extra information gained from another box is often lower value than the loss of clarity from the diagram becoming more complex. A diagram with every box and arrow becomes a useless hairball. Consider creating multiple diagrams instead.\n4. Avoid overlapping arrows. Layout engines do a good job of this. If they fail to find a layout that avoids overlaps, it's a sign that the diagram is too complex.\n5. Group related components together visually. This happens naturally through their connections and the layout engine's work. Note when related components appear far apart from each other - it's a sign that they the diagram is not well specified.\n\n### Styling\n\n1. Label all components, except the most obvious arrows. A relationship may be obvious to you, but not to others. Use concise 1-2 word labels in a readable font size.\n2. Use color sparingly and meaningfully, e.g., to highlight critical paths.\n3. Use a consistent shapes, arrows and colors. This helps scan the diagram quicker and intuitively understand the relationships.\n4. Use stylistic elements like thicker lines for primary flows and thinner for secondary flows, dotted or dashed lines for optional or future relationships, and different shapes for different types of components.\n5. Consider accessibility by not relying on color as the only way information is conveyed. Use labels and shapes to ensure the diagram works in black and white too. 1 in 12 men are [colorblind](https://www.nei.nih.gov/learn-about-eye-health/eye-conditions-and-diseases/color-blindness).\n6.  Use logos when talking about specific products or services. They're designed to be recognizable and make the diagram more engaging. Don't use logos as placeholders for generic concepts. Always add a label too, because not everyone will recognize a logo.\n\nThese principles can also be used in an LLM prompt to generate diagrams.\n\n## Try it yourself\n\nDid I manage to convince you that text-based diagrams + LLMs are a great match? If you're interested in trying it yourself, I suggest starting with the [D2 playground](https://play.d2lang.com) and any LLM assistant, such as Gemini or ChatGPT. Just ask it to generate the D2 code for a simple diagram.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}